@model ProductManager.Models.Entities.Produto

@{
    ViewData["Title"] = "Criar Produto";
    Layout = "_Layout"; // Usando o layout definido no arquivo _Layout.cshtml
}

<div class="container mt-4">
    <h1>@ViewData["Title"]</h1>
    <h4>Cadastro de Produto</h4>
    <hr>

    <form asp-action="Create" method="post" class="needs-validation" novalidate>
        @Html.AntiForgeryToken()
        <div class="row">
            <!-- Nome -->
            <div class="col-md-6 mb-3">
                <label for="Nome" class="form-label">Nome</label>
                <input type="text" class="form-control" id="Nome" name="Nome" value="@Model.Nome" required maxlength="100" />
                <div class="invalid-feedback">
                    O nome é obrigatório e deve ter no máximo 100 caracteres.
                </div>
                @if (!string.IsNullOrEmpty(ViewData["NomeErro"]?.ToString()))
                {
                    <div class="text-danger">@ViewData["NomeErro"]</div>
                }
            </div>

            <!-- Preço -->
            <div class="col-md-6 mb-3">
                <label for="Preco" class="form-label">Preço</label>
                <input type="number" class="form-control" id="Preco" name="Preco" value="@Model.Preco" required min="0.01" step="0.01" />
                <div class="invalid-feedback">
                    O preço deve ser maior que zero.
                </div>
                @if (!string.IsNullOrEmpty(ViewData["PrecoErro"]?.ToString()))
                {
                    <div class="text-danger">@ViewData["PrecoErro"]</div>
                }
            </div>
        </div>

        <!-- Descrição -->
        <div class="mb-3">
            <label for="Descricao" class="form-label">Descrição</label>
            <textarea class="form-control" id="Descricao" name="Descricao">@Model.Descricao</textarea>
            <div class="invalid-feedback">
                A descrição não pode ser vazia.
            </div>
            @if (!string.IsNullOrEmpty(ViewData["DescricaoErro"]?.ToString()))
            {
                <div class="text-danger">@ViewData["DescricaoErro"]</div>
            }
        </div>

        <!-- Botões -->
        <div class="d-flex justify-content-between">
            <button type="submit" class="btn btn-primary">Salvar</button>
            <a href="@Url.Action("Index", "Produto")" class="btn btn-secondary">Cancelar</a>
        </div>
    </form>
</div>

@section Scripts {
    <script>
        // Habilitar validação do Bootstrap 5
        (function () {
            'use strict'

            // Obtém todos os formulários que possuem a classe needs-validation
            var forms = document.querySelectorAll('.needs-validation')

            // Loop para impedir o envio do formulário se estiver inválido
            Array.prototype.slice.call(forms)
                .forEach(function (form) {
                    form.addEventListener('submit', function (event) {
                        if (!form.checkValidity()) {
                            event.preventDefault()
                            event.stopPropagation()
                        }

                        form.classList.add('was-validated')
                    }, false)
                })
        })()
    </script>
}
